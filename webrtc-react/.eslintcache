[{"C:\\Users\\wiktor.flis\\code\\webrtc-react-app\\webrtc-react\\src\\index.js":"1","C:\\Users\\wiktor.flis\\code\\webrtc-react-app\\webrtc-react\\src\\Home.js":"2","C:\\Users\\wiktor.flis\\code\\webrtc-react-app\\webrtc-react\\src\\socket.js":"3","C:\\Users\\wiktor.flis\\code\\webrtc-react-app\\webrtc-react\\src\\App.js":"4","C:\\Users\\wiktor.flis\\code\\webrtc-react-app\\webrtc-react\\src\\Broadcast.js":"5"},{"size":517,"mtime":1606757321271,"results":"6","hashOfConfig":"7"},{"size":1622,"mtime":1606762932942,"results":"8","hashOfConfig":"7"},{"size":451,"mtime":1606762569256,"results":"9","hashOfConfig":"7"},{"size":1058,"mtime":1606762360585,"results":"10","hashOfConfig":"7"},{"size":4533,"mtime":1606765735322,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1kt5shk",{"filePath":"14","messages":"15","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},"C:\\Users\\wiktor.flis\\code\\webrtc-react-app\\webrtc-react\\src\\index.js",[],"C:\\Users\\wiktor.flis\\code\\webrtc-react-app\\webrtc-react\\src\\Home.js",["25","26"],"import { useState, useRef, useEffect } from 'react'\r\nimport { createSocket, config } from './socket'\r\n\r\n\r\nconst Home = () => {\r\n  const peerConnection = useRef()\r\n  const videoRef = useRef(null)\r\n  const socket = createSocket()\r\n\r\n  useEffect(() => {\r\n    socket.on(\"offer\", (id, description) => {\r\n      peerConnection.current = new RTCPeerConnection(config);\r\n      peerConnection\r\n        .current\r\n        .setRemoteDescription(description)\r\n        .then(() => peerConnection.current.createAnswer())\r\n        .then(sdp => peerConnection.current.setLocalDescription(sdp))\r\n        .then(() => {\r\n          socket.emit(\"answer\", id, peerConnection.current.localDescription);\r\n        });\r\n      peerConnection.current.ontrack = (event) => {\r\n        videoRef.current.srcObject = event.streams[0];\r\n      };\r\n      peerConnection.current.onicecandidate = (event) => {\r\n        if (event.candidate) {\r\n          socket.emit(\"candidate\", id, event.candidate);\r\n        }\r\n      };\r\n    });\r\n\r\n\r\n    socket.on(\"candidate\", (id, candidate) => {\r\n      peerConnection\r\n        .current\r\n        .addIceCandidate(new RTCIceCandidate(candidate))\r\n        .catch(e => console.error(e));\r\n    });\r\n\r\n    socket.on(\"connect\", () => {\r\n      socket.emit(\"watcher\");\r\n    });\r\n\r\n    socket.on(\"broadcaster\", () => {\r\n      socket.emit(\"watcher\");\r\n    });\r\n\r\n    socket.on(\"disconnectPeer\", () => {\r\n      peerConnection.current.close();\r\n    });\r\n\r\n    return () => {\r\n      socket.disconnect()\r\n    }\r\n\r\n  }, [])\r\n\r\n\r\n  return (\r\n    <video playsInline autoPlay muted id=\"videoRef\" ref={videoRef} />\r\n  )\r\n}\r\n\r\nexport default Home","C:\\Users\\wiktor.flis\\code\\webrtc-react-app\\webrtc-react\\src\\socket.js",["27","28"],"import { useState, useEffect } from 'react'\r\nimport io from 'socket.io-client'\r\n\r\nconst config = {\r\n  iceServers: [\r\n    {\r\n      \"urls\": \"stun:stun.l.google.com:19302\",\r\n    },\r\n  ],\r\n};\r\n\r\nconst socketUrl = window.location.origin //\"http://localhost:5050\"\r\nconst socketPath = \"/foo/bar\"\r\n\r\n\r\n\r\nfunction createSocket(namespace) {\r\n\r\n  const socket = io.connect(socketUrl, { path: socketPath })\r\n\r\n  return socket\r\n}\r\n\r\nexport { createSocket, config }","C:\\Users\\wiktor.flis\\code\\webrtc-react-app\\webrtc-react\\src\\App.js",[],"C:\\Users\\wiktor.flis\\code\\webrtc-react-app\\webrtc-react\\src\\Broadcast.js",["29","30"],"import { useState, useRef, useEffect } from 'react'\r\nimport { createSocket, config } from './socket'\r\n\r\nconst Broadcast = () => {\r\n    const videoRef = useRef(null)\r\n    const socket = createSocket()\r\n    const audioSource = useRef(null)\r\n    const videoSource = useRef(null)\r\n    const peerConnections = useRef({})\r\n\r\n\r\n    function getDevices() {\r\n        return navigator.mediaDevices.enumerateDevices();\r\n    }\r\n\r\n    function handleDevices(deviceInfos) {\r\n        window.deviceInfos = deviceInfos;\r\n        for (const deviceInfo of deviceInfos) {\r\n            const option = document.createElement(\"option\");\r\n            option.value = deviceInfo.deviceId;\r\n            if (deviceInfo.kind === \"audioinput\") {\r\n                option.text = deviceInfo.label || `Microphone ${audioSource.current.length + 1}`;\r\n                audioSource.current.appendChild(option);\r\n            } else if (deviceInfo.kind === \"videoinput\") {\r\n                option.text = deviceInfo.label || `Camera ${videoSource.current.length + 1}`;\r\n                videoSource.current.appendChild(option);\r\n            }\r\n        }\r\n    }\r\n\r\n    const getStream = () => {\r\n        if (window.stream) {\r\n            window.stream.getTracks().forEach(track => {\r\n                track.stop();\r\n            });\r\n        }\r\n        const audio = audioSource.current.value;\r\n        const video = videoSource.current.value;\r\n        const constraints = {\r\n            audio: { deviceId: audio ? { exact: audio } : undefined },\r\n            video: { deviceId: video ? { exact: video } : undefined }\r\n        };\r\n        return navigator.mediaDevices\r\n            .getUserMedia(constraints)\r\n            .then(handleStream)\r\n            .catch(handleError);\r\n    }\r\n\r\n    const handleStream = (stream) => {\r\n        window.stream = stream;\r\n        audioSource.current.selectedIndex = [...audioSource.current.options].findIndex(\r\n            option => option.text === stream.getAudioTracks()[0].label\r\n        );\r\n        videoSource.current.selectedIndex = [...videoSource.current.options].findIndex(\r\n            option => option.text === stream.getVideoTracks()[0].label\r\n        );\r\n        videoRef.current.srcObject = stream;\r\n        socket.emit(\"broadcaster\");\r\n    }\r\n\r\n    const handleError = (error) => {\r\n        console.error(\"Error: \", error);\r\n    }\r\n\r\n    useEffect(() => {\r\n        socket.on(\"candidate\", (id, candidate) => {\r\n            if (peerConnections.current[id]) {\r\n                peerConnections.current[id].addIceCandidate(new RTCIceCandidate(candidate))\r\n            }\r\n        });\r\n\r\n        socket.on(\"disconnectPeer\", id => {\r\n            peerConnections.current[id].close()\r\n            delete peerConnections.current[id]\r\n        });\r\n\r\n        socket.on(\"answer\", (id, description) => {\r\n            if (peerConnections.current[id]) {\r\n                peerConnections.current[id].setRemoteDescription(description);\r\n            }\r\n        });\r\n\r\n        socket.on(\"watcher\", id => {\r\n            const peerConnection = new RTCPeerConnection(config);\r\n\r\n            peerConnections.current[id] = peerConnection\r\n\r\n            const stream = videoRef.current.srcObject;\r\n            stream.getTracks().forEach(track => peerConnection.addTrack(track, stream));\r\n\r\n            peerConnection.onicecandidate = event => {\r\n                if (event.candidate) {\r\n                    socket.emit(\"candidate\", id, event.candidate);\r\n                }\r\n            };\r\n\r\n            peerConnection\r\n                .createOffer()\r\n                .then(sdp => peerConnection.setLocalDescription(sdp))\r\n                .then(() => {\r\n                    socket.emit(\"offer\", id, peerConnection.localDescription);\r\n                });\r\n\r\n        });\r\n\r\n        getStream()\r\n            .then(getDevices)\r\n            .then(handleDevices)\r\n\r\n        return () => {\r\n            socket.disconnect()\r\n        }\r\n\r\n    }, [])\r\n\r\n\r\n    return (\r\n        <div>\r\n            <video playsInline autoPlay muted id=\"videoRef\" ref={videoRef} />\r\n\r\n            <section className=\"select\">\r\n                <label for=\"audioSource\">Audio source: </label>\r\n                <select id=\"audioSource\" ref={audioSource} onChange={getStream}></select>\r\n            </section>\r\n\r\n            <section className=\"select\">\r\n                <label for=\"videoSource\">Video source: </label>\r\n                <select id=\"videoSource\" ref={videoSource} onChange={getStream}></select>\r\n            </section>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Broadcast",{"ruleId":"31","severity":1,"message":"32","line":1,"column":10,"nodeType":"33","messageId":"34","endLine":1,"endColumn":18},{"ruleId":"35","severity":1,"message":"36","line":55,"column":6,"nodeType":"37","endLine":55,"endColumn":8,"suggestions":"38"},{"ruleId":"31","severity":1,"message":"32","line":1,"column":10,"nodeType":"33","messageId":"34","endLine":1,"endColumn":18},{"ruleId":"31","severity":1,"message":"39","line":1,"column":20,"nodeType":"33","messageId":"34","endLine":1,"endColumn":29},{"ruleId":"31","severity":1,"message":"32","line":1,"column":10,"nodeType":"33","messageId":"34","endLine":1,"endColumn":18},{"ruleId":"35","severity":1,"message":"40","line":114,"column":8,"nodeType":"37","endLine":114,"endColumn":10,"suggestions":"41"},"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'socket'. Either include it or remove the dependency array.","ArrayExpression",["42"],"'useEffect' is defined but never used.","React Hook useEffect has missing dependencies: 'getStream' and 'socket'. Either include them or remove the dependency array.",["43"],{"desc":"44","fix":"45"},{"desc":"46","fix":"47"},"Update the dependencies array to be: [socket]",{"range":"48","text":"49"},"Update the dependencies array to be: [getStream, socket]",{"range":"50","text":"51"},[1501,1503],"[socket]",[3916,3918],"[getStream, socket]"]